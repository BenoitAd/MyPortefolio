# Dockerfile pour une application Next.js (Portfolio)

# === Stage 1: Build ===
# Utiliser l'image Node.js 22 LTS Alpine (légère)
FROM node:22-alpine AS builder

# Définir le répertoire de travail dans le conteneur
WORKDIR /app

# Copier les fichiers de dépendances
# Assurez-vous que package-lock.json est à jour (ou utilisez yarn.lock si vous utilisez Yarn)
COPY package.json ./
COPY package-lock.json ./
# OU si vous utilisez Yarn :
# COPY yarn.lock ./

# Installer TOUTES les dépendances (y compris devDependencies nécessaires pour le build)
# 'npm ci' est recommandé pour des builds reproductibles basés sur package-lock.json
RUN npm ci
# OU si vous utilisez Yarn :
# RUN yarn install --frozen-lockfile

# Copier le reste du code source de l'application
# Utilisez .dockerignore pour exclure les fichiers/dossiers non nécessaires (node_modules, .git, .env, etc.)
COPY . .

# (Optionnel) Définir les variables d'environnement nécessaires UNIQUEMENT au build
# Exemple :
# ARG NEXT_PUBLIC_GTM_ID
# ENV NEXT_PUBLIC_GTM_ID=${NEXT_PUBLIC_GTM_ID}
# Passez-les lors du build avec --build-arg NEXT_PUBLIC_GTM_ID=votre_valeur

# Construire l'application Next.js pour la production
# Cela génère le dossier .next optimisé
RUN npm run build
# OU si vous utilisez Yarn :
# RUN yarn build

# === Stage 2: Production ===
# Utiliser la même image Node.js légère pour l'exécution
FROM node:22-alpine

WORKDIR /app

# Copier les fichiers de dépendances pour installer UNIQUEMENT les dépendances de production
COPY --from=builder /app/package.json ./
COPY --from=builder /app/package-lock.json ./
# OU si vous utilisez Yarn :
# COPY --from=builder /app/yarn.lock ./

# Installer uniquement les dépendances nécessaires pour faire tourner l'application en production
RUN npm ci --only=production
# OU si vous utilisez Yarn :
# RUN yarn install --production --frozen-lockfile

# Copier les artefacts de build nécessaires depuis le stage "builder"
# Notez les slashes '/' à la fin des destinations pour indiquer explicitement des répertoires
COPY --from=builder /app/.next ./.next/
COPY --from=builder /app/public ./public/
COPY --from=builder /app/next.config.js ./ # Fichier de configuration Next.js

# (Optionnel mais Fortement Recommandé) Exécuter en tant qu'utilisateur non-root
# Crée un utilisateur et un groupe système dédiés
# RUN addgroup --system --gid 1001 nodejs
# RUN adduser --system --uid 1001 nextjs
# USER nextjs
# Assurez-vous que cet utilisateur a les permissions sur /app si nécessaire (WORKDIR s'en charge souvent)

# Exposer le port sur lequel l'application Next.js écoute (par défaut 3000)
EXPOSE 3000

# Définir la variable d'environnement pour indiquer le mode production (bonne pratique)
ENV NODE_ENV=production

# Commande pour démarrer l'application Next.js en mode production
# Utilise le serveur intégré de Next.js basé sur le build dans .next/
CMD ["npm", "start"]
# OU si vous utilisez Yarn :
# CMD ["yarn", "start"]


# --- Section Optionnelle: Optimisation avec 'output: "standalone"' ---
# Si vous configurez `output: "standalone"` dans votre `next.config.js`,
# le build générera un dossier `.next/standalone` avec uniquement le nécessaire.
# Le stage 2 pourrait alors ressembler à ceci :
#
# FROM node:22-alpine
# WORKDIR /app
# ENV NODE_ENV=production
# # Copier le dossier standalone généré par le build
# COPY --from=builder /app/.next/standalone ./
# # Copier le dossier static (non inclus dans standalone par défaut)
# COPY --from=builder /app/.next/static ./.next/static/
# # Copier le dossier public
# COPY --from=builder /app/public ./public/
# # (Optionnel) Créer et utiliser un utilisateur non-root comme ci-dessus
# # USER nextjs
# EXPOSE 3000
# # La commande pour démarrer est différente car server.js est à la racine du dossier standalone copié
# CMD ["node", "server.js"]
# --- Fin de la section optionnelle ---